# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger: none
pr: none

pool:
  vmImage: 'windows-latest'

variables:
  - group: 'GitHubSecrets'  # Variable group
  - name: solution          # Inline variable
    value: '**/*.sln'
  - name: buildPlatform
    value: 'Any CPU'
  - name: buildConfiguration
    value: 'Release'


parameters:
  - name: version
    displayName: 'Release Version (e.g., 1.0.0)'
    type: string
    default: '1.0.0'

steps:
  - checkout: self
    persistCredentials: true

  - task: NuGetToolInstaller@1
    displayName: 'Install NuGet'

  - task: NuGetCommand@2
    displayName: 'Restore NuGet packages'
    inputs:
      command: 'restore'
      restoreSolution: '$(solution)'
      verbosityRestore: 'Detailed'
      packagesDirectory: '$(Build.SourcesDirectory)\packages'

  - task: PowerShell@2
    displayName: 'Print out main directory contents.'
    inputs:
      targetType: 'inline'
      script: |
        $projectPath = '$(Build.SourcesDirectory)'
        # List the contents of the Data directory for debugging
        Get-ChildItem -Path $projectPath -Recurse

  - task: VSBuild@1
    displayName: 'Clean and Build Library'
    inputs:
      solution: '$(Build.SourcesDirectory)/DrawingShapesLibrary/DrawingShapesLibrary.csproj'
      configuration: '$(buildConfiguration)'
      msbuildArgs: '/t:Clean;Build'

  - task: VSBuild@1
    displayName: 'Build WPF Project'
    inputs:
      solution: '$(Build.SourcesDirectory)/MySnipItTool/MySnipItTool.csproj'
      configuration: '$(buildConfiguration)'

  - task: PowerShell@2
    displayName: 'Create Zip File'
    inputs:
      targetType: 'inline'
      script: |
        echo "Zipping files..."
        $outputPath = '$(Build.ArtifactStagingDirectory)\MySnipItTool.zip'
        $binPath = '$(Build.SourcesDirectory)\MySnipItTool\bin\Release'

        # Remove existing zip file if it exists
        if (Test-Path $outputPath) {
          Remove-Item $outputPath
        }

        # List the contents of the Release directory inside bin for debugging
        Get-ChildItem -Path $binPath -Recurse

        # Check if bin\Release folder exists
        if (-Not (Test-Path $binPath)) {
          Write-Host "Error: Bin/Release directory does not exist."
          exit 1
        }

        Compress-Archive -Path "$binPath" -DestinationPath $outputPath
        echo "Zip file created at: $outputPath"

  - task: CmdLine@2
    displayName: 'Check Zip File Contents'
    inputs:
      script: |
        echo "Checking contents of the zip file..."
        tar -tf "$(Build.ArtifactStagingDirectory)\MySnipItTool.zip"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish WPF Artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\MySnipItTool.zip'
      ArtifactName: 'MySnipItTool'
      publishLocation: 'Container'
      ArtifactType: 'Container'

  - task: PowerShell@2
    displayName: 'Create and Push Git Tag'
    inputs:
      targetType: 'inline'
      script: |
        $version = "${{ parameters.version }}"
        Write-Host "-----Tagging commit with $version"

        # Configure Git identity
        Write-Host "Configuring git email and name"
        git config --global user.email "zacharywatson1129@gmail.com"
        git config --global user.name "zacharywatson1129"

        # Retrieve and validate the GitHub token
        Write-Host "-----Performing a check to make sure the PAT is set."
        if ([string]::IsNullOrEmpty($env:GITHUB_TOKEN)) {
          Write-Error "GITHUB_TOKEN token is not set."
          exit 1
        }

        # Debug steps - leave this off unless you need them.
        #Write-Host "GITHUB_TOKEN Length: $($env:GITHUB_TOKEN.Length)"
        #Write-Host "GITHUB_TOKEN value (should be ***): $($env:GITHUB_TOKEN)"

        # Build the remote URL using the token
        Write-Host "-----Setting the remote url."
        git remote set-url origin "https://$env:GITHUB_TOKEN@github.com/zacharywatson1129/MySnipItTool.git"

        # Another debug step, this lists all the remote tags.
        #git ls-remote https://$env:GITHUB_TOKEN@github.com/zacharywatson1129/MySnipItTool.git

        # Create and push the tag
        Write-Host "-----Tagging this commit."
        git tag $version
        Write-Host "-----Pushing this now tagged commit."
        git push origin $version --verbose
    env:
      GITHUB_TOKEN: $(GithubToken)

  - task: GitHubRelease@1
    inputs:
      gitHubConnection: 'zacharywatson1129'
      repositoryName: 'zacharywatson1129/MySnipItTool'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'gitTag'
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'commitBased'
      assets: '$(Build.ArtifactStagingDirectory)\MySnipItTool.zip'  # Point to your zip
      githubToken: '$(GitHubToken)'  # Reference the secure token


